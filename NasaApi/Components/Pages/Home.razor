@rendermode InteractiveServer
@page "/"
@using Newtonsoft.Json
@inject HttpClient Http

<PageTitle>Buscar fotos de Marte</PageTitle>

<h1>Buscar fotos de Marte</h1>

<label>Camara</label>
<InputSelect @bind-Value="selectedCamera">
    <option value="fhaz">Front Hazard Avoidance Camera</option>
    <option value="rhaz">Rear Hazard Avoidance Camera</option>
    <option value="mast">Mast Camera</option>
    <option value="chemcam">Chemistry and Camera Complex</option>
    <option value="mahli">Mars Hand Lens Imager</option>
    <option value="mardi">Mars Descent Imager</option>
    <option value="navcam">Navigation Camera</option>
</InputSelect>

<button @onclick="BuscarFotos">Buscar fotos</button>
@if (isLoading)
{
    <div>
        <h1>Cargando...</h1>
    </div>
}
else if (photos == null || photos.Count == 0)
{
    <div>
        <h1>No hay imágenes disponibles</h1>
    </div>
}
else
{
    <div class="row">
        @foreach (var photo in photos.Take(10))
        {
            <div class="col-md-4">
                <img src="@photo.ImgSrc" alt="Foto de Marte" class="img-fluid" />
            </div>
        }
    </div>
}

@code {
    private List<MarsPhoto>? photos;

	private bool isLoading = true;

    private string selectedCamera = "fhaz";

    private const string API_KEY = "T4mg5vUoVusW6OdOv5VWG5MA2gGThzclfEy1tWAh";

    protected async Task BuscarFotos()
    {
        try
        {
            photos = null;
			isLoading = true;
            var peticion = await Http.GetAsync($"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&camera={selectedCamera}&api_key={API_KEY}");

            if (peticion.IsSuccessStatusCode)
            {
                var json = await peticion.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<MarsApiResponse>(json);

                photos = result?.Photos ?? new List<MarsPhoto>();
				isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener productos: {ex.Message}");

        }
    }
    private class MarsApiResponse
    {
        public List<MarsPhoto>? Photos { get; set; }
    }

    private class MarsPhoto
    {
        [JsonProperty("img_src")]
        public string ImgSrc { get; set; }
    }
}
